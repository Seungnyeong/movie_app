{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","title","year","summary","poster","genres","className","src","alt","tilte","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"wTAkCeA,MA3Bf,YAAuD,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC9C,OAAO,yBAAKC,UAAU,SAEV,yBAAKC,IAAKH,EAAQI,IAAKP,EAAOQ,MAAM,UACxC,yBAAKH,UAAU,cACX,wBAAIA,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,cAAcJ,GAC5B,wBAAII,UAAU,UACTD,EAAOK,KAAI,SAACC,EAAOC,GAAR,OACR,wBAAIC,IAAKD,EAAON,UAAU,gBAAgBK,OAIlD,uBAAGL,UAAU,iBAAiBH,EAAQW,MAAM,EAAE,KAA9C,UC8BGC,G,iNA5CbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEACmCC,IAAMC,IAAI,4DAD7C,gBACcJ,EADd,EACFK,KAAQA,KAAQL,OACxBM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IAHzB,2C,mFAOVU,KAAKR,c,+BAEG,IAAD,EACuBQ,KAAKX,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACA,6BAASZ,UAAU,aAAaW,EAE5B,yBAAKX,UAAU,UACZ,0BAAMA,UAAU,eAAhB,gBAID,yBAAKA,UAAU,UAEVY,EAAOR,KAAI,SAAAkB,GACV,OAAO,kBAAC,EAAD,CACLf,IAAKe,EAAMC,GACXA,GAAID,EAAMC,GACV3B,KAAM0B,EAAM1B,KACZD,MAAO2B,EAAM3B,MACbE,QAASyB,EAAMzB,QACfC,OAAQwB,EAAME,mBACdzB,OAAQuB,EAAMvB,kB,GAnCd0B,IAAMC,YCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.5fac6cf0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Movie.css\"\n\n// 상태값 즉 state가 필요하지 않는 컴포넌트는 굳이 클래스 컴포넌트로 만들지 않고\n// 함수형 컴포넌트로 선언한다\n\nfunction Movie({title, year, summary, poster, genres}){\nreturn <div className=\"movie\">\n         \n            <img src={poster} alt={title} tilte=\"title\"/>\n        <div className=\"movie_data\">\n            <h3 className=\"movie_title\">{title}</h3>\n            <h5 className=\"movie_year\">{year}</h5>\n            <ul className=\"genres\">\n                {genres.map((genre, index) => (\n                    <li key={index} className=\"genres_genre\">{genre}</li>\n                    )\n                )}\n            </ul>\n            <p className=\"movie_summary\">{summary.slice(0,140)}...</p>\n        </div>\n      </div>\n}   \n\nMovie.propTypes = {\n    id : PropTypes.number.isRequired,\n    title : PropTypes.string.isRequired,\n    year : PropTypes.number.isRequired,\n    summary : PropTypes.string.isRequired,\n    poster : PropTypes.string.isRequired,\n    genres : PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from './Movie';\nimport \"./App.css\"\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  }\n  // async 선언으로 비동기화(오기까지 기다림) 그거 뭐냐고 물으신다면 await가 있는 부분이 다 올때까지 기다림\n  getMovies = async () => {\n    const { data: { data: { movies } } } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\")\n    console.log(movies);\n    this.setState({ movies, isLoading: false });\n  }\n  // data patch 하는 부분\n  componentDidMount() {\n    this.getMovies();\n  }\n  render() {\n    const { isLoading, movies } = this.state\n    return (\n    <section className=\"container\">{isLoading\n      ? (\n        <div className=\"loader\">\n           <span className=\"loader_text\">Loading ...</span> \n        </div>\n      )\n      : (\n          <div className=\"movies\">\n            {\n               movies.map(movie => {\n                return <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image} \n                  genres={movie.genres}\n                  />\n              })\n            }\n          </div>\n        )}\n     </section>\n    )\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}